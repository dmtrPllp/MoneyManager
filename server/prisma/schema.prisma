// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  Id                     Int                     @id @default(autoincrement())
  Name                   String
  Email                  String                  @unique
  Password               String
  Phone                  String?
  isActivated            Boolean                 @default(false)
  Accounts               Account[]
  role                   Role                    @default(USER)
  Token                  Token[]
  activationLink         String                  @unique
  EmailVerificationLinks EmailVerificationLinks?
}

model EmailVerificationLinks {
  id     Int    @id @default(autoincrement())
  email  String @unique
  user   User   @relation(fields: [userId], references: [Id])
  userId Int    @unique
}

model Token {
  Id           Int    @id @default(autoincrement())
  userId       Int    @unique
  user         User   @relation(fields: [userId], references: [Id])
  refreshToken String @unique
}

model Account {
  Id             Int         @id @default(autoincrement())
  iconId         Int
  Icon           Icon        @relation(fields: [iconId], references: [Id])
  currencyTypeId Int
  currencyType   Currency    @relation(fields: [currencyTypeId], references: [Id])
  Name           String
  Balance        Decimal
  userId         Int
  user           User        @relation(fields: [userId], references: [Id])
  Operations     Operation[]
}

model Icon {
  Id        Int       @id @default(autoincrement())
  Name      String    @unique
  ImagePath String
  Account   Account[]
}

model Currency {
  Id      Int       @id @default(autoincrement())
  Type    String    @unique
  Account Account[]
}

model Operation {
  Id         Int      @id @default(autoincrement())
  Name       String
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [Id])
  accountId  Int
  Account    Account  @relation(fields: [accountId], references: [Id])
  Sum        Decimal
  Date       DateTime
}

model Category {
  Id        Int         @id @default(autoincrement())
  Name      String      @unique
  IconPath  String
  Type      String
  Operation Operation[]
}

model Product {
  id                    Int                     @id @default(autoincrement())
  name                  String
  price                 Int
  ProductAttributeGroup ProductAttributeGroup[]
}

model ProductAttributeGroup {
  productId Int
  product   Product        @relation(fields: [productId], references: [id])
  groupId   Int
  group     AttributeGroup @relation(fields: [groupId], references: [id])

  @@id([productId, groupId])
}

model AttributeGroup {
  id                      Int                       @id @default(autoincrement())
  name                    String
  multipleSelection       Boolean
  ProductAttributeGroup   ProductAttributeGroup[]
  AttributeGroupAttribute AttributeGroupAttribute[]
}

model AttributeGroupAttribute {
  attributeId         Int
  attribute           Attribute      @relation(fields: [attributeId], references: [id])
  groupId             Int
  group               AttributeGroup @relation(fields: [groupId], references: [id])
  selected_by_default Boolean
  min                 Int
  max                 Int
  price               Decimal?

  @@id([attributeId, groupId])
}

model Attribute {
  id                      Int                       @id @default(autoincrement())
  name                    String
  weight                  Decimal
  available               Boolean
  AttributeGroupAttribute AttributeGroupAttribute[]
}

enum Role {
  USER
  ADMIN
}

model AllLanguages {
  id               Int                @id @default(autoincrement())
  iso2             String
  iso3             String
  allLanguagesData AllLanguagesData[]

  @@unique([id, iso2])
  @@map("all_languages")
}

model AllLanguagesData {
  name             String
  language         AllLanguages @relation(fields: [languageId, targetLanguageId], references: [id, iso2])
  languageId       Int          @map("language_id")
  targetLanguageId String       @map("target_language_id")

  @@id([languageId, targetLanguageId])
}

model A {
  aId String @id
  b   Int
}

model B {
  bId String @id
  a   Int
}
